{{ 'section-main-product.css' | asset_url | stylesheet_tag }}

<div class="product">
  <div class="product__slider-wrapper">
    {% if product.images.size > 1 %}
      <div class="product__slider">
        {% for image in product.images %}
          <div class="product__slider-slide {% if forloop.first %}active{% endif %}">
            <img src="{{ image | image_url: master }}" alt="{{ image.alt | escape }}" width="auto" height="auto">
          </div>
        {% endfor %}

        <div class="slider__arrows">
          <button class="slider-arrow slider-arrow--prev" aria-label="Previous slide">
            <img src="{{ 'arrow.svg' | asset_url }}" alt="" width="24" height="24">
          </button>
          <button class="slider-arrow slider-arrow--next" aria-label="Next slide">
            <img src="{{ 'arrow.svg' | asset_url }}" alt="" width="24" height="24" style="transform: rotate(180deg)">
          </button>
        </div>

        <div class="slider__dots"></div>
      </div>

    {% elsif product.images.size == 1 %}
      <div class="product__image-single">
        <img
          src="{{ product.featured_image | image_url: master }}"
          alt="{{ product.featured_image.alt | escape }}"
          width="auto"
          height="auto"
        >
      </div>

    {% else %}
      <p>No images available for this product.</p>
    {% endif %}
  </div>

  <div class="product-gallery">
    {% if product.selected_or_first_available_variant.featured_image %}
      {% assign featured = product.selected_or_first_available_variant.featured_image %}
    {% else %}
      {% assign featured = product.featured_image %}
    {% endif %}

    {% comment %} Если не одна картинка {% endcomment %}
    {% if product.images.size > 1 %}
      <ul class="product-gallery__thumbnails">
        {% for image in product.images %}
          <li class="product-gallery__thumbnail-item {% if image == featured %} active {% endif %}">
            <img
              src="{{ image | img_url: '96x122' }}"
              alt="Thumbnail {{ forloop.index }}"
              class="product-gallery__thumbnail"
              width="auto"
              height="auto"
            >
          </li>
        {% endfor %}
      </ul>
    {% endif %}

    <div class="product-gallery__main">
      <img
        id="product-gallery__main-image"
        src="{{ featured | img_url: '800x800' }}"
        alt="Main image"
        class="product-gallery__image"
        width="auto"
        height="auto"
      >
    </div>
  </div>

  <div>
    <div class="product__data">
      <div class="product__data-info">
        <h1 class="product__data-title">
          {{ product.title | escape }}
        </h1>

        <div class="product__data-prices">
          {% assign variant = product.selected_or_first_available_variant %}
          {% assign has_discount = false %}
          {% if variant.compare_at_price and variant.compare_at_price > variant.price %}
            {% assign has_discount = true %}
          {% endif %}

          <span class="product__data-prices-sale {% unless has_discount %}hidden{% endunless %}">
            {{ variant.price | money }}
          </span>
          <span class="product__data-prices-compare {% unless has_discount %}hidden{% endunless %}">
            {{ variant.compare_at_price | money }}
          </span>
          <span class="product__data-prices-regular {% if has_discount %}hidden{% endif %}">
            {{ variant.price | money }}
          </span>
        </div>
      </div>

      {% render 'separator' %}
      {% form 'product', product, id: 'product__form', class: 'product__form' %}
        <input id="product-id" type="hidden" name="id" value="{{ product.selected_or_first_available_variant.id }}">
        <input id="product-quantity" type="hidden" name="quantity" value="1">

        <fieldset class="product__sizes">
          <legend class="product__sizes-title">
            Size:
            <span id="selected-size">
              {% for option in product.options_with_values %}
                {% if option.name == 'Size' %}
                  {{ option.selected_value }}
                {% endif %}
              {% endfor %}
            </span>
          </legend>

          {% for option in product.options_with_values %}
            {% if option.name == 'Size' %}
              {% for value in option.values %}
                {% assign matched_variant = product.variants | where: 'title', value | first %}
                <label class="product__size">
                  <input
                    type="radio"
                    name="{{ option.name }}"
                    value="{{ matched_variant.id }}"
                    class="product__size-input"
                    {% if option.selected_value == value %}
                      checked
                    {% endif %}
                    {% unless matched_variant.available %}
                      disabled
                    {% endunless %}
                  >
                  <span class="product__size-label">{{ value }}</span>
                </label>
              {% endfor %}
            {% endif %}
          {% endfor %}
        </fieldset>
        {% render 'separator' %}

        <div class="product__purchase">
          <div class="product__purchase-quantity">
            {% render 'minus' %}
            <span
              class="product__purchase-quantity-value"
              role="spinbutton"
              aria-valuemin="1"
              aria-valuemax="999"
              aria-valuenow="1"
              aria-label="Product quantity"
              >1</span
            >
            {% render 'plus' %}
          </div>

          <button type="submit" class="product__purchase-button">
            {% if product.selected_or_first_available_variant.available %}
              Add to Cart
            {% else %}
              Out of Stock
            {% endif %}
          </button>
        </div>
      {% endform %}
    </div>

    <div class="metafields">
      {% if product.metafields.custom.product_details %}
        <div class="metafields__item">
          <div class="metafields__header">
            <div class="metafields__title">Product details</div>
            <button class="metafields__toggle">
              <img
                src="{{ 'arrow.svg' | asset_url }}"
                alt="Toggle Button"
                width="16"
                height="16"
                class="metafields__icon"
              >
            </button>
          </div>
          <div class="metafields__content">{{ product.metafields.custom.product_details }}</div>
        </div>
      {% endif %}

      {% if product.metafields.custom.product_features %}
        <div class="metafields__item">
          <div class="metafields__header">
            <div class="metafields__title">Product features</div>
            <button class="metafields__toggle">
              <img
                src="{{ 'arrow.svg' | asset_url }}"
                alt="Toggle Button"
                width="16"
                height="16"
                class="metafields__icon"
              >
            </button>
          </div>
          <div class="metafields__content">{{ product.metafields.custom.product_features }}</div>
        </div>
      {% endif %}
    </div>
  </div>
</div>

<div class="product__recommendations">
  <div class="product__recommendations-header">
    <h3 class="product__recommendations-title">Recommended</h3>
    <a class="product__recommendations-toggle" href="#">
      <p class="product__recommendations-toggle-text">View All</p>
      <button class="metafields__toggle">
        <img
          src="{{ 'arrow.svg' | asset_url }}"
          alt="Toggle Button"
          width="24"
          height="24"
          class="metafields__icon"
          style="transform: rotate(180deg);"
        >
      </button>
    </a>
  </div>
  {% render 'separator' %}

  <div class="product__recommendations-list">
    <article class="product__recommendations-item">CARD</article>
    <article class="product__recommendations-item">CARD</article>
    <article class="product__recommendations-item">CARD</article>
    <article class="product__recommendations-item">CARD</article>
    <article class="product__recommendations-item">CARD</article>
  </div>

  <progress></progress>
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
    // Get the product object from the Liquid template (thats exactly why i cant push this script to separated file)
    let product = {{ product | json }}

    // Attach change event listeners to all size radio inputs
    document.querySelectorAll('.product__size-input').forEach((radio) => {
      radio.addEventListener('change', () => {
        // Get the selected variant ID from the checked radio
        const selectedId = document.querySelector('.product__size-input:checked')?.value;
        if (!selectedId) return; // Exit if nothing is selected

        // Find the matching variant object by ID
        let matchedVariant = product.variants.find(variant => String(variant.id) === selectedId);
        if (!matchedVariant) return; // Exit if variant not found

        // Update the hidden input with the selected variant ID for the form
        const productIdInput = document.querySelector('#product-id');
        if (productIdInput) productIdInput.value = matchedVariant.id;

        // Find the index of the "Size" option in the product options array
        const sizeIndex = product.options.findIndex(opt => opt === 'Size');
        // Get the size value for the selected variant
        const sizeValue = sizeIndex !== -1 ? matchedVariant.options[sizeIndex] : '';
        // Update the displayed selected size text in the UI
        const selectedSizeEl = document.querySelector('#selected-size');
        if (selectedSizeEl) selectedSizeEl.textContent = sizeValue;

        // Update the price display elements
        const saleEl = document.querySelector('.product__data-prices-sale');
        const compareEl = document.querySelector('.product__data-prices-compare');
        const regularEl = document.querySelector('.product__data-prices-regular');

        if (saleEl && compareEl && regularEl) {
          // Format prices using Shopify.formatMoney
          const formattedPrice = Shopify.formatMoney(matchedVariant.price);
          const formattedCompare = Shopify.formatMoney(matchedVariant.compare_at_price);

          saleEl.textContent = formattedPrice;
          compareEl.textContent = formattedCompare;
          regularEl.textContent = formattedPrice;

          // Check if there is a discount to toggle price visibility
          const hasDiscount = matchedVariant.compare_at_price && matchedVariant.compare_at_price > matchedVariant.price;

          saleEl.classList.toggle('hidden', !hasDiscount);
          compareEl.classList.toggle('hidden', !hasDiscount);
          regularEl.classList.toggle('hidden', hasDiscount);
        }

        // Change image
        if (matchedVariant.featured_image) {
          document.querySelector('#product-gallery__main-image').setAttribute('src', matchedVariant.featured_image.src)
          // Delete all active thumbnails
          document.querySelector('.product-gallery__thumbnail-item.active').classList.remove('active')
          // Add active to corresponding thumbnail
          document.querySelectorAll('.product-gallery__thumbnail-item')[matchedVariant.featured_image.position - 1].classList.add('active')
        }

        // Update button to selected variant availability
        const button = document.querySelector('.product__purchase-button');
        if (matchedVariant.available) {
          button.textContent = 'Add to Cart';
          button.disabled = false;
        } else {
          button.textContent = 'Out of Stock';
          button.disabled = true;
        }

        // Update the URL query parameter for the variant without page reload
        try {
          let url = new URL(window.location.href);
          url.searchParams.set('variant', matchedVariant.id);
          window.history.replaceState(null, null, url.toString());
        } catch (e) {
          console.warn('Could not update URL:', e);
        }

        // Sync the hidden quantity input value with the displayed quantity
        const quantityValue = document.querySelector('.product__purchase-quantity-value')?.textContent;
        const quantityInput = document.querySelector('#product-quantity');
        if (quantityValue && quantityInput) {
          quantityInput.value = quantityValue;
        }
      });
    });

    // Gallery
    document.querySelectorAll('.product-gallery__thumbnail-item').forEach((thumbnail) => {
      thumbnail.addEventListener('click', () => {
        // Delete all active thumbnails
        document.querySelector('.product-gallery__thumbnail-item.active').classList.remove('active')
        // Add active to corresponding thumbnail
        thumbnail.classList.add('active')
        // swap images;
        document.querySelector('#product-gallery__main-image').setAttribute('src', thumbnail.querySelector('img').getAttribute('src'))
      })
    })


    // Related Products
    fetch(window.Shopify.routes.root + 'recommendations/products.json?product_id={{ product.id }}')
    .then((response) => response.json())
    .then(({ products }) => {
      console.log(products);
      
      // if (products.length > 0) {
      //   const firstRecommendedProduct = products[0];

      //   alert(`The title of the first recommended product is: ${firstRecommendedProduct.title}`);
      // }
    });
  });
</script>

{% schema %}
{
  "name": "Main Product",
  "tag": "section",
  "class": "section-pdp",
  "settings": []
}
{% endschema %}
