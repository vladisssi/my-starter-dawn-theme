{{ 'section-main-product.css' | asset_url | stylesheet_tag }}

<div class="product">
  <div class="product__slider-wrapper">
    {% if product.images.size > 1 %}
      <div class="product__slider">
        {% for image in product.images %}
          <div class="product__slider-slide {% if forloop.first %}active{% endif %}">
            <img
              class="product__slider-image"
              src="{{ image | image_url: master }}"
              alt="{{ image.alt | escape }}"
              width="auto"
              height="auto"
            >
          </div>
        {% endfor %}

        <div class="slider__arrows">
          <button class="slider-arrow slider-arrow--prev" aria-label="Previous slide">
            <img src="{{ 'arrow.svg' | asset_url }}" alt="Slider Arrow Left" width="24" height="24">
          </button>
          <button class="slider-arrow slider-arrow--next" aria-label="Next slide">
            <img
              src="{{ 'arrow.svg' | asset_url }}"
              alt="Slider Arrow Right"
              width="24"
              height="24"
              style="transform: rotate(180deg)"
            >
          </button>
        </div>

        <div class="slider__dots"></div>
      </div>

    {% elsif product.images.size == 1 %}
      <div class="product__image-single">
        <img
          src="{{ product.featured_image | image_url: master }}"
          alt="{{ product.featured_image.alt | escape }}"
          width="auto"
          height="auto"
        >
      </div>

    {% else %}
      <p>No images available for this product.</p>
    {% endif %}
  </div>

  <div class="product-gallery">
    {% if product.selected_or_first_available_variant.featured_image %}
      {% assign featured = product.selected_or_first_available_variant.featured_image %}
    {% else %}
      {% assign featured = product.featured_image %}
    {% endif %}

    {% comment %} Если не одна картинка {% endcomment %}
    {% if product.images.size > 1 %}
      <ul class="product-gallery__thumbnails">
        {% for image in product.images %}
          <li class="product-gallery__thumbnail-item {% if image == featured %} active {% endif %}">
            <img
              src="{{ image | img_url: '96x122' }}"
              alt="Thumbnail {{ forloop.index }}"
              class="product-gallery__thumbnail"
              width="auto"
              height="auto"
            >
          </li>
        {% endfor %}
      </ul>
    {% endif %}

    <div class="product-gallery__main">
      <img
        id="product-gallery__main-image"
        src="{{ featured | img_url: '800x800' }}"
        alt="Main image"
        class="product-gallery__image"
        width="auto"
        height="auto"
      >
    </div>
  </div>

  <div>
    <div class="product__data">
      <div class="product__data-info">
        <h1 class="product__data-title">
          {{ product.title | escape }}
        </h1>

        {% unless product.available %}
          <div class="product__data-sold">Out of stock</div>
        {% endunless %}

        <div class="product__data-prices">
          {% assign variant = product.selected_or_first_available_variant %}
          {% assign has_discount = false %}
          {% if variant.compare_at_price and variant.compare_at_price > variant.price %}
            {% assign has_discount = true %}
          {% endif %}

          <span class="product__data-prices-sale {% unless has_discount %}hidden{% endunless %}">
            {{ variant.price | money }}
          </span>
          <span class="product__data-prices-compare {% unless has_discount %}hidden{% endunless %}">
            {{ variant.compare_at_price | money }}
          </span>
          <span class="product__data-prices-regular {% if has_discount %}hidden{% endif %}">
            {{ variant.price | money }}
          </span>
        </div>
      </div>

      {% render 'separator' %}
      {% form 'product', product, id: 'product__form', class: 'product__form' %}
        <input id="product-id" type="hidden" name="id" value="{{ product.selected_or_first_available_variant.id }}">
        <input id="product-quantity" type="hidden" name="quantity" value="1">

        <fieldset class="product__sizes">
          <legend class="product__sizes-title">
            Size:
            <span id="selected-size">
              {% for option in product.options_with_values %}
                {% if option.name == 'Size' %}
                  {{ option.selected_value }}
                {% endif %}
              {% endfor %}
            </span>
          </legend>

          {% for option in product.options_with_values %}
            {% if option.name == 'Size' %}
              {% for value in option.values %}
                {% assign matched_variant = product.variants | where: 'title', value | first %}
                <label class="product__size">
                  <input
                    type="radio"
                    name="{{ option.name }}"
                    value="{{ matched_variant.id }}"
                    class="product__size-input"
                    {% if option.selected_value == value %}
                      checked
                    {% endif %}
                    {% unless matched_variant.available %}
                      disabled
                    {% endunless %}
                  >
                  <span class="product__size-label">{{ value }}</span>
                </label>
              {% endfor %}
            {% endif %}
          {% endfor %}
        </fieldset>
        {% render 'separator' %}

        <div class="product__purchase">
          <div class="product__purchase-quantity">
            {% render 'minus' %}
            <span
              class="product__purchase-quantity-value"
              role="spinbutton"
              aria-valuemin="1"
              aria-valuemax="999"
              aria-valuenow="1"
              aria-label="Product quantity"
              >1</span
            >
            {% render 'plus' %}
          </div>

          <button type="submit" class="product__purchase-button">
            {% if product.selected_or_first_available_variant.available %}
              Add to Cart
            {% else %}
              Out of Stock
            {% endif %}
          </button>
        </div>
      {% endform %}
    </div>

    <div class="metafields">
      {% if product.metafields.custom.product_details %}
        <div class="metafields__item">
          <div class="metafields__header">
            <div class="metafields__title">Product details</div>
            <button class="metafields__toggle">
              <img
                src="{{ 'arrow.svg' | asset_url }}"
                alt="Toggle Button"
                width="16"
                height="16"
                class="metafields__icon"
              >
            </button>
          </div>
          <div class="metafields__content">{{ product.metafields.custom.product_details }}</div>
        </div>
      {% endif %}

      {% if product.metafields.custom.product_features %}
        <div class="metafields__item">
          <div class="metafields__header">
            <div class="metafields__title">Product features</div>
            <button class="metafields__toggle">
              <img
                src="{{ 'arrow.svg' | asset_url }}"
                alt="Toggle Button"
                width="16"
                height="16"
                class="metafields__icon"
              >
            </button>
          </div>
          <div class="metafields__content">{{ product.metafields.custom.product_features }}</div>
        </div>
      {% endif %}
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
        const sizeMapping = {
      // Letter sizes
      'XXS': 'Double Extra Small',
      'XS': 'Extra Small',
      'S': 'Small',
      'M': 'Medium',
      'L': 'Large',
      'XL': 'Extra Large',
      'XXL': 'Double Extra Large',
      'XXXL': 'Triple Extra Large',
      '4XL': 'Quadruple Extra Large',
      '5XL': 'Quintuple Extra Large',

      // US numeric sizes
      '0': 'US 0 (Extra Small)',
      '2': 'US 2 (Extra Small)',
      '4': 'US 4 (Small)',
      '6': 'US 6 (Small-Medium)',
      '8': 'US 8 (Medium)',
      '10': 'US 10 (Medium-Large)',
      '12': 'US 12 (Large)',
      '14': 'US 14 (Large-XL)',
      '16': 'US 16 (XL)',
      '18': 'US 18 (XXL)',
      '20': 'US 20 (XXXL)',

      // EU sizes
      'EU32': 'EU 32 (XXS)',
      'EU34': 'EU 34 (XS)',
      'EU36': 'EU 36 (S)',
      'EU38': 'EU 38 (M)',
      'EU40': 'EU 40 (M-L)',
      'EU42': 'EU 42 (L)',
      'EU44': 'EU 44 (XL)',
      'EU46': 'EU 46 (XXL)',
      'EU48': 'EU 48 (XXXL)',

      // UK sizes
      'UK4': 'UK 4 (XS)',
      'UK6': 'UK 6 (S)',
      'UK8': 'UK 8 (M)',
      'UK10': 'UK 10 (M-L)',
      'UK12': 'UK 12 (L)',
      'UK14': 'UK 14 (XL)',
      'UK16': 'UK 16 (XXL)',

      // IT sizes
      'IT38': 'IT 38 (XS)',
      'IT40': 'IT 40 (S)',
      'IT42': 'IT 42 (M)',
      'IT44': 'IT 44 (L)',
      'IT46': 'IT 46 (XL)',
      'IT48': 'IT 48 (XXL)',

      // Jeans sizes (waist inches)
      'W24': 'Waist 24"',
      'W26': 'Waist 26"',
      'W28': 'Waist 28"',
      'W30': 'Waist 30"',
      'W32': 'Waist 32"',
      'W34': 'Waist 34"',
      'W36': 'Waist 36"',
      'W38': 'Waist 38"',
      'W40': 'Waist 40"',

      // Generic numeric (some brands use this)
      '28': '28 (XS)',
      '30': '30 (S)',
      '32': '32 (M)',
      '34': '34 (L)',
      '36': '36 (XL)',
      '38': '38 (XXL)',
      '40': '40 (XXXL)'
      };
      // Get the product object from the Liquid template (thats exactly why i cant push this script to separated file)
      let product = {{ product | json }}

      // Get name of the size on initial load
      const selectedRadio = document.querySelector('.product__size-input:checked');
      const selectedSizeEl = document.querySelector('#selected-size');

      if (selectedRadio && selectedSizeEl) {
        const selectedId = selectedRadio.value;
        const matchedVariant = product.variants.find(variant => String(variant.id) === selectedId);

      if (matchedVariant) {
          const sizeIndex = product.options.findIndex(opt => opt === 'Size');
          const sizeValue = sizeIndex !== -1 ? matchedVariant.options[sizeIndex] : '';
          const mappedSize = sizeMapping[sizeValue] || sizeValue;
          selectedSizeEl.textContent = mappedSize;
        }
      }

      // Attach change event listeners to all size radio inputs
      document.querySelectorAll('.product__size-input').forEach((radio) => {
        radio.addEventListener('change', () => {
          // Get the selected variant ID from the checked radio
          const selectedId = document.querySelector('.product__size-input:checked')?.value;
          if (!selectedId) return; // Exit if nothing is selected

          // Find the matching variant object by ID
          let matchedVariant = product.variants.find(variant => String(variant.id) === selectedId);
          if (!matchedVariant) return; // Exit if variant not found

          // Update the hidden input with the selected variant ID for the form
          const productIdInput = document.querySelector('#product-id');
          if (productIdInput) productIdInput.value = matchedVariant.id;

          // Find the index of the "Size" option in the product options array
          const sizeIndex = product.options.findIndex(opt => opt === 'Size');
          // Get the size value for the selected variant
          const sizeValue = sizeIndex !== -1 ? matchedVariant.options[sizeIndex] : '';
          // Update the displayed selected size text in the UI
          const selectedSizeEl = document.querySelector('#selected-size');
          if (selectedSizeEl) {
            selectedSizeEl.textContent = sizeMapping[sizeValue] || sizeValue;
          }

          // Update the price display elements
          const saleEl = document.querySelector('.product__data-prices-sale');
          const compareEl = document.querySelector('.product__data-prices-compare');
          const regularEl = document.querySelector('.product__data-prices-regular');

          if (saleEl && compareEl && regularEl) {
            // Format prices using Shopify.formatMoney
            const formattedPrice = Shopify.formatMoney(matchedVariant.price);
            const formattedCompare = Shopify.formatMoney(matchedVariant.compare_at_price);

            saleEl.textContent = formattedPrice;
            compareEl.textContent = formattedCompare;
            regularEl.textContent = formattedPrice;

            // Check if there is a discount to toggle price visibility
            const hasDiscount = matchedVariant.compare_at_price && matchedVariant.compare_at_price > matchedVariant.price;

            saleEl.classList.toggle('hidden', !hasDiscount);
            compareEl.classList.toggle('hidden', !hasDiscount);
            regularEl.classList.toggle('hidden', hasDiscount);
          }

          // Change image
          if (matchedVariant.featured_image) {
            document.querySelector('#product-gallery__main-image').setAttribute('src', matchedVariant.featured_image.src)
            // Delete all active thumbnails
            document.querySelector('.product-gallery__thumbnail-item.active').classList.remove('active')
            // Add active to corresponding thumbnail
            document.querySelectorAll('.product-gallery__thumbnail-item')[matchedVariant.featured_image.position - 1].classList.add('active')
          }

          // Update button to selected variant availability
          const button = document.querySelector('.product__purchase-button');
          if (matchedVariant.available) {
            button.textContent = 'Add to Cart';
            button.disabled = false;
          } else {
            button.textContent = 'Out of Stock';
            button.disabled = true;
          }

          // Update the URL query parameter for the variant without page reload
          try {
            let url = new URL(window.location.href);
            url.searchParams.set('variant', matchedVariant.id);
            window.history.replaceState(null, null, url.toString());
          } catch (e) {
            console.warn('Could not update URL:', e);
          }

          // Sync the hidden quantity input value with the displayed quantity
          const quantityValue = document.querySelector('.product__purchase-quantity-value')?.textContent;
          const quantityInput = document.querySelector('#product-quantity');
          if (quantityValue && quantityInput) {
            quantityInput.value = quantityValue;
          }
        });
      });

      // Gallery
      document.querySelectorAll('.product-gallery__thumbnail-item').forEach((thumbnail) => {
        thumbnail.addEventListener('click', () => {
          // Delete all active thumbnails
          document.querySelector('.product-gallery__thumbnail-item.active').classList.remove('active')
          // Add active to corresponding thumbnail
          thumbnail.classList.add('active')
          // swap images;
          document.querySelector('#product-gallery__main-image').setAttribute('src', thumbnail.querySelector('img').getAttribute('src'))
        })
      })
    });
</script>

<style>
  .section-pdp {
    background-color: {{ section.settings.background_color }};
  }
</style>

{% schema %}
{
  "name": "Main Product",
  "tag": "section",
  "class": "section-pdp",
  "settings": [
    {
      "id": "background_color",
      "type": "color",
      "label": "Background Color",
      "default": "#ffffff"
    }
  ]
}
{% endschema %}
