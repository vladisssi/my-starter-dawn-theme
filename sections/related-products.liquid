{{ 'section-related-products.css' | asset_url | stylesheet_tag }}

<div class="product__recommendations">
  <div class="product__recommendations-header">
    <h3 class="product__recommendations-title">{{ section.settings.title }}</h3>
    <a class="product__recommendations-toggle" href="{{ product.collections.first.url }}">
      <p class="product__recommendations-toggle-text">View All</p>
      <button class="metafields__toggle">
        <img
          src="{{ 'arrow.svg' | asset_url }}"
          alt="Toggle Button"
          width="24"
          height="24"
          class="metafields__icon"
          style="transform: rotate(180deg);"
        >
      </button>
    </a>
  </div>
  {% render 'separator' %}

  <div class="product__recommendations-list"></div>

  <progress class="product__recommendations-progress"></progress>
</div>

{% if cart.item_count > 0 %}
  {% assign related_id = cart.items[0].product_id %}
{% else %}
  {% assign related_id = product.id %}
{% endif %}

<script>
  const listContainer = document.querySelector('.product__recommendations-list');
  const progress = document.querySelector('.product__recommendations-progress');

  progress.max = 100;
  progress.value = 0;

  listContainer.addEventListener('scroll', () => {
    const scrollLeft = listContainer.scrollLeft;
    const scrollWidth = listContainer.scrollWidth;
    const clientWidth = listContainer.clientWidth;

    const maxScroll = scrollWidth - clientWidth;
    const percentageScrolled = maxScroll > 0 ? (scrollLeft / maxScroll) * 100 : 0;
    progress.value = percentageScrolled;
  });

  function buildBlock(product) {
    const hasDiscount = product.compare_at_price && product.compare_at_price > product.price;

    return `
      <article class="product-card">
        <a href="${product.url}" class="product-card__link" aria-label="View ${product.title}">
          <div class="product-card__image-wrapper">
            ${product.tags.includes('badge') ? '<span class="product-card__badge">BESTSELLER</span>' : ''}
            <img src="${product.featured_image}" class="product-card__image" alt="${product.title}" />
          </div>
          <div class="product-card__footer">
            <div class="product-card__info">
              <h4 class="product-card__title">${product.title}</h4>
              <h4 class="product-card__price">
                ${
                  hasDiscount
                    ? `<span class="product-card__price-sale">${Shopify.formatMoney(product.price)}</span>
                      <span class="product-card__price-compare">${Shopify.formatMoney(product.compare_at_price)}</span>`
                    : `<span class="product-card__price">${Shopify.formatMoney(product.price)}</span>`
                }
              </h4>
            </div>
            <form method="post" action="/cart/add">
              <input type="hidden" name="id" value="${product.variants[0].id}">
              <input type="hidden" name="quantity" value="1">
              <button type="submit" class="product-card__add-to-cart" aria-label="Add ${product.title} to cart">
                <!-- Add-to-cart icon -->
                <svg class="product-card__icon" xmlns="http://www.w3.org/2000/svg" width="28" height="28" viewBox="0 0 28 28" fill="none">
                  <rect width="28" height="28" rx="6" fill="#212322"/>
                  <path d="M19.1042 10.5H8.89548..." stroke="#FAFAF8" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
              </button>
            </form>
          </div>
        </a>
      </article>
    `;
  }

  fetch(window.Shopify.routes.root + 'recommendations/products.json?product_id={{ related_id }}')
    .then((response) => response.json())
    .then(({ products }) => {
      if (!products || products.length === 0) {
        listContainer.innerHTML = '<p class="product__recommendations-empty">No related products found.</p>';
        return;
      }

      const htmlAll = products.map(buildBlock).join('');
      listContainer.innerHTML = htmlAll;
    })
    .catch((e) => {
      listContainer.innerHTML = '<p class="product__recommendations-error">Failed to load related products.</p>';
      console.error('Error loading recommendations:', e);
    });
</script>

<style>
  .product__recommendations {
    background-color: {{ section.settings.background_color }};
  }
</style>

{% schema %}
{
  "name": "Related Products",
  "settings": [
    {
      "id": "background_color",
      "type": "color",
      "label": "Background Color",
      "default": "#ffffff"
    },
    {
      "type": "text",
      "id": "title",
      "label": "Title",
      "default": "You may also like"
    }
  ],
  "presets": [
    {
      "name": "Related Products"
    }
  ]
}
{% endschema %}
